'use client';

import { useEffect, useState } from 'react';
import { XMarkIcon, Cog6ToothIcon } from '@heroicons/react/24/outline';
import type { SiteConfig } from '@/types/content';
import { canSavePreferences, shouldShowCookieBanner, getCookieConsent, setCookieConsent } from '@/utils/cookies';
import { useLanguage } from '@/utils/i18n';

type Props = {
  config: SiteConfig;
};

type UserPreferences = {
  colorProfile?: string;
  animationsEnabled?: boolean;
  language?: string;
};

type TabId = 'general' | 'themes' | 'privacy';

export default function SettingsPanel({ config }: Props) {
  const { translations } = useLanguage(config);
  const [isOpen, setIsOpen] = useState(false);
  const [activeTab, setActiveTab] = useState<TabId>('general');
  const [selectedTheme, setSelectedTheme] = useState<string>('');
  const [animationsEnabled, setAnimationsEnabled] = useState(true);
  const [language, setLanguage] = useState('en');
  const [cookieConsent, setCookieConsentState] = useState<boolean | null>(null);
  const [showCookieBanner, setShowCookieBanner] = useState(false);

  const settingsConfig = config?.settings;
  const shouldShow = settingsConfig?.enabled && settingsConfig?.showIcon;

  useEffect(() => {
    // Load user preferences
    const savedPrefs = canSavePreferences() ? localStorage.getItem('userPreferences') : null;
    if (savedPrefs) {
      try {
        const prefs: UserPreferences = JSON.parse(savedPrefs);
        setSelectedTheme(prefs.colorProfile || config?.colorProfile || 'default');
        setAnimationsEnabled(prefs.animationsEnabled ?? true);
        setLanguage(prefs.language || config?.i18n?.defaultLocale || 'en');
      } catch (error) {
        console.error('Error loading preferences:', error);
      }
    } else {
      setSelectedTheme(config?.colorProfile || 'default');
      setAnimationsEnabled(true);
      setLanguage(config?.i18n?.defaultLocale || 'en');
    }

    // Check cookie consent
    const consent = getCookieConsent();
    setCookieConsentState(consent);
    setShowCookieBanner(shouldShowCookieBanner());
  }, [config]);

  const savePreferences = () => {
    if (!canSavePreferences()) return;

    const prefs: UserPreferences = {
      colorProfile: selectedTheme,
      animationsEnabled,
      language,
    };

    try {
      localStorage.setItem('userPreferences', JSON.stringify(prefs));
    } catch (error) {
      console.error('Error saving preferences:', error);
    }
  };

  const handleThemeChange = (themeId: string) => {
    setSelectedTheme(themeId);
    
    // Apply theme immediately
    const themeChangeEvent = new CustomEvent('themeChange', { 
      detail: { theme: themeId } 
    });
    window.dispatchEvent(themeChangeEvent);
    
    savePreferences();
  };

  const handleAnimationToggle = (enabled: boolean) => {
    setAnimationsEnabled(enabled);
    
    // Apply animation setting immediately
    const animationEvent = new CustomEvent('animationToggle', { 
      detail: { enabled } 
    });
    window.dispatchEvent(animationEvent);
    
    savePreferences();
  };

  const handleLanguageChange = (lang: string) => {
    setLanguage(lang);
    
    // Apply language change immediately
    const languageEvent = new CustomEvent('languageChange', { 
      detail: { language: lang } 
    });
    window.dispatchEvent(languageEvent);
    
    savePreferences();
  };

  const handleCookieConsent = (accept: boolean) => {
    setCookieConsent(accept);
    setCookieConsentState(accept);
    setShowCookieBanner(false);
    
    if (accept) {
      savePreferences();
    }
  };

  if (!shouldShow) return null;

  const themes = config?.colorProfiles || {};
  const availableLanguages = config?.i18n?.languages || { en: 'English' };

  const tabs = [
    { id: 'general' as TabId, label: 'General', icon: '‚öôÔ∏è' },
    { id: 'themes' as TabId, label: 'Themes', icon: 'üé®' },
    { id: 'privacy' as TabId, label: 'Privacy', icon: 'üîí' }
  ];

  return (
    <>
      {/* Settings Icon */}
      <button
        id="settings-icon"
        onClick={() => setIsOpen(true)}
        className="fixed bottom-4 right-4 p-3 rounded-full shadow-lg transition-all duration-300 hover:scale-110 z-40"
        style={{
          backgroundColor: 'var(--card)',
          border: '1px solid var(--card-border)',
          color: 'var(--foreground)',
        }}
        title="Settings"
      >
        <Cog6ToothIcon className="w-6 h-6" />
      </button>

      {/* Settings Panel */}
      {isOpen && (
        <div 
          id="settings-overlay" 
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setIsOpen(false);
            }
          }}
        >
          <div
            id="settings-panel"
            className="relative w-full max-w-md rounded-xl shadow-2xl overflow-hidden"
            style={{
              backgroundColor: 'var(--card)',
              border: '1px solid var(--card-border)',
              maxHeight: '90vh',
            }}
          >
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b" style={{ borderColor: 'var(--card-border)' }}>
              <h2 className="text-xl font-bold" style={{ color: 'var(--foreground)' }}>
                Settings
              </h2>
              <button
                onClick={() => setIsOpen(false)}
                className="p-1 rounded-lg transition-colors"
                style={{ color: 'var(--foreground-muted)' }}
              >
                <XMarkIcon className="w-6 h-6" />
              </button>
            </div>

            {/* Tab Navigation */}
            <div className="flex border-b" style={{ borderColor: 'var(--card-border)' }}>
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex-1 px-4 py-3 text-sm font-medium transition-colors ${
                    activeTab === tab.id
                      ? 'border-b-2'
                      : ''
                  }`}
                  style={{
                    color: activeTab === tab.id ? 'var(--accent-1)' : 'var(--foreground-muted)',
                    borderColor: activeTab === tab.id ? 'var(--accent-1)' : 'transparent',
                  }}
                >
                  <span className="mr-2">{tab.icon}</span>
                  {tab.label}
                </button>
              ))}
            </div>

            {/* Tab Content */}
            <div className="p-4 max-h-96 overflow-y-auto">
              {/* General Tab */}
              {activeTab === 'general' && (
                <div className="space-y-4">
                  {/* Language Selection */}
                  <div>
                    <label className="block text-sm font-medium mb-2" style={{ color: 'var(--foreground)' }}>
                      Language
                    </label>
                    <select
                      value={language}
                      onChange={(e) => handleLanguageChange(e.target.value)}
                      className="w-full px-3 py-2 rounded-lg border"
                      style={{
                        backgroundColor: 'var(--background)',
                        borderColor: 'var(--card-border)',
                        color: 'var(--foreground)',
                      }}
                    >
                      {Object.entries(availableLanguages).map(([code, name]) => (
                        <option key={code} value={code}>
                          {name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Animation Toggle */}
                  <div>
                    <label className="flex items-center justify-between">
                      <span className="text-sm font-medium" style={{ color: 'var(--foreground)' }}>
                        Enable Animations
                      </span>
                      <input
                        type="checkbox"
                        checked={animationsEnabled}
                        onChange={(e) => handleAnimationToggle(e.target.checked)}
                        className="ml-3"
                      />
                    </label>
                  </div>
                </div>
              )}

              {/* Themes Tab */}
              {activeTab === 'themes' && (
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold mb-4" style={{ color: 'var(--foreground)' }}>
                    Color Themes
                  </h3>
                  <div className="grid grid-cols-2 gap-3">
                    {Object.entries(themes).map(([id, theme]) => (
                      <button
                        key={id}
                        onClick={() => handleThemeChange(id)}
                        className={`p-3 rounded-lg border-2 transition-all ${
                          selectedTheme === id ? 'scale-105' : ''
                        }`}
                        style={{
                          backgroundColor: theme.background || '#000',
                          borderColor: selectedTheme === id ? 'var(--accent-1)' : 'transparent',
                          color: theme.foreground || '#fff',
                        }}
                      >
                        <div className="text-xs font-medium">
                          {theme.name || id}
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              )}

              {/* Privacy Tab */}
              {activeTab === 'privacy' && (
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold mb-4" style={{ color: 'var(--foreground)' }}>
                    Privacy Settings
                  </h3>
                  <div>
                    <label className="flex items-center justify-between">
                      <span className="text-sm font-medium" style={{ color: 'var(--foreground)' }}>
                        Cookie Consent
                      </span>
                      <span className="text-sm" style={{ 
                        color: cookieConsent ? 'var(--success)' : 'var(--warning)' 
                      }}>
                        {cookieConsent ? 'Granted' : 'Not granted'}
                      </span>
                    </label>
                    {!cookieConsent && (
                      <button
                        onClick={() => handleCookieConsent(true)}
                        className="mt-2 px-4 py-2 rounded-lg text-sm font-medium"
                        style={{
                          backgroundColor: 'var(--accent-1)',
                          color: 'var(--card-contrast)',
                        }}
                      >
                        Grant Consent
                      </button>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Cookie Banner */}
      {showCookieBanner && (
        <div
          id="cookie-banner"
          className="fixed bottom-0 left-0 right-0 p-4 z-50"
          style={{
            backgroundColor: 'var(--card)',
            borderTop: '1px solid var(--card-border)',
          }}
        >
          <div className="max-w-4xl mx-auto flex flex-col sm:flex-row items-center justify-between gap-4">
            <p className="text-sm" style={{ color: 'var(--foreground)' }}>
              This site uses cookies to enhance your experience and save your preferences.
            </p>
            <div className="flex gap-2">
              <button
                onClick={() => handleCookieConsent(false)}
                className="px-4 py-2 rounded-lg text-sm font-medium"
                style={{
                  backgroundColor: 'var(--background)',
                  color: 'var(--foreground)',
                  border: '1px solid var(--card-border)',
                }}
              >
                Decline
              </button>
              <button
                onClick={() => handleCookieConsent(true)}
                className="px-4 py-2 rounded-lg text-sm font-medium"
                style={{
                  backgroundColor: 'var(--accent-1)',
                  color: 'var(--card-contrast)',
                }}
              >
                Accept
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
